// =============================================================================
// a_c_compiler
//
// Â© Asher Mancinelli & JeanHeyd "ThePhD" Meneide
// All rights reserved.
// ============================================================================ //

#ifdef CHAR_TOKEN
CHAR_TOKEN(tok_l_paren, '(')
CHAR_TOKEN(tok_r_paren, ')')
CHAR_TOKEN(tok_l_curly_bracket, '{')
CHAR_TOKEN(tok_r_curly_bracket, '}')
CHAR_TOKEN(tok_l_square_bracket, '[')
CHAR_TOKEN(tok_r_square_bracket, ']')
CHAR_TOKEN(tok_semicolon, ';')
CHAR_TOKEN(tok_asterisk, '*')
CHAR_TOKEN(tok_colon, ':')
CHAR_TOKEN(tok_comma, ',')
CHAR_TOKEN(tok_equals_sign, '=')

CHAR_TOKEN(tok_plus, '+')
CHAR_TOKEN(tok_minus, '-')
CHAR_TOKEN(tok_ampersand, '&')
CHAR_TOKEN(tok_percent, '%')
#endif

#ifdef KEYWORD_TOKEN
#define MAKE_KEYWORD_TOKEN(KEYWORD, INTVAL) KEYWORD_TOKEN(tok_keyword_##KEYWORD, INTVAL, KEYWORD)
MAKE_KEYWORD_TOKEN(alignas, -1025)
MAKE_KEYWORD_TOKEN(_Alignas, -1026)
MAKE_KEYWORD_TOKEN(alignof, -1027)
MAKE_KEYWORD_TOKEN(_Alignof, -1028)
MAKE_KEYWORD_TOKEN(auto, -1029)
MAKE_KEYWORD_TOKEN(__auto_type, -1030)
MAKE_KEYWORD_TOKEN(bool, -1031)
MAKE_KEYWORD_TOKEN(_Bool, -1032)
MAKE_KEYWORD_TOKEN(break, -1033)
MAKE_KEYWORD_TOKEN(case, -1034)
MAKE_KEYWORD_TOKEN(char, -1035)
MAKE_KEYWORD_TOKEN(const, -1036)
MAKE_KEYWORD_TOKEN(constexpr, -1037)
MAKE_KEYWORD_TOKEN(continue, -1038)
MAKE_KEYWORD_TOKEN(default, -1039)
MAKE_KEYWORD_TOKEN(do, -1040)
MAKE_KEYWORD_TOKEN(double, -1041)
MAKE_KEYWORD_TOKEN(else, -1042)
MAKE_KEYWORD_TOKEN(enum, -1043)
MAKE_KEYWORD_TOKEN(extern, -1044)
MAKE_KEYWORD_TOKEN(false, -1045)
MAKE_KEYWORD_TOKEN(float, -1046)
MAKE_KEYWORD_TOKEN(for, -1047)
MAKE_KEYWORD_TOKEN(goto, -1048)
MAKE_KEYWORD_TOKEN(if, -1049)
MAKE_KEYWORD_TOKEN(inline, -1050)
MAKE_KEYWORD_TOKEN(int, -1051)
MAKE_KEYWORD_TOKEN(long, -1052)
MAKE_KEYWORD_TOKEN(nullptr, -1053)
MAKE_KEYWORD_TOKEN(register, -1054)
MAKE_KEYWORD_TOKEN(restrict, -1055)
MAKE_KEYWORD_TOKEN(return, -1056)
MAKE_KEYWORD_TOKEN(short, -1057)
MAKE_KEYWORD_TOKEN(signed, -1058)
MAKE_KEYWORD_TOKEN(sizeof, -1059)
MAKE_KEYWORD_TOKEN(static, -1060)
MAKE_KEYWORD_TOKEN(static_assert, -1061)
MAKE_KEYWORD_TOKEN(_Static_assert, -1062)
MAKE_KEYWORD_TOKEN(struct, -1063)
MAKE_KEYWORD_TOKEN(switch, -1064)
MAKE_KEYWORD_TOKEN(thread_local, -1065)
MAKE_KEYWORD_TOKEN(_Thread_local, -1066)
MAKE_KEYWORD_TOKEN(true, -1067)
MAKE_KEYWORD_TOKEN(typedef, -1068)
MAKE_KEYWORD_TOKEN(typeof, -1069)
MAKE_KEYWORD_TOKEN(__typeof__, -1070)
MAKE_KEYWORD_TOKEN(typeof_unqual, -1071)
MAKE_KEYWORD_TOKEN(union, -1072)
MAKE_KEYWORD_TOKEN(unsigned, -1073)
MAKE_KEYWORD_TOKEN(void, -1074)
MAKE_KEYWORD_TOKEN(volatile, -1075)
MAKE_KEYWORD_TOKEN(while, -1076)
MAKE_KEYWORD_TOKEN(_Atomic, -1077)
MAKE_KEYWORD_TOKEN(_BitInt, -1078)
MAKE_KEYWORD_TOKEN(_Complex, -1079)
MAKE_KEYWORD_TOKEN(_Generic, -1080)
MAKE_KEYWORD_TOKEN(_Imaginary, -1081)
MAKE_KEYWORD_TOKEN(_Noreturn, -1082)
// some extension keywords
MAKE_KEYWORD_TOKEN(_Operator, -2049)
MAKE_KEYWORD_TOKEN(__attribute__, -2050)
MAKE_KEYWORD_TOKEN(__declspec, -2051)
MAKE_KEYWORD_TOKEN(__vectorcall, -2052)
MAKE_KEYWORD_TOKEN(__thiscall, -2053)
MAKE_KEYWORD_TOKEN(asm, -2054)
MAKE_KEYWORD_TOKEN(__asm__, -2055)
#undef MAKE_KEYWORD_TOKEN
#endif

#ifdef TOKEN
// defined specifically for comment parsing work
TOKEN(tok_forward_slash, '/')
TOKEN(tok_id, -1)
TOKEN(tok_num_literal, -2)
TOKEN(tok_str_literal, -3)
TOKEN(tok_line_comment, -4)
TOKEN(tok_block_comment, -5)
TOKEN(tok_newline, -6)
TOKEN(tok_tab, -7)
// special embed stream token
TOKEN(tok_pp_embed, -8)
#endif
